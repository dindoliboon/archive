' #########################################################################

    GLOBAL pMenu
    GLOBAL pStatus
    GLOBAL pSubclass
    GLOBAL pCommon
    GLOBAL pRich
    GLOBAL pRich2

' #########################################################################

    LOCAL szFile$
    LOCAL szOutput$
    LOCAL szTempA$
    LOCAL iX
    LOCAL pHelp

    ' set globals to false
    pMenu     = FALSE
    pStatus   = FALSE
    pHelp     = FALSE
    pSubclass = FALSE
    pCommon   = FALSE
    pRich     = FALSE
    pRich2    = FALSE

    ' scan arguments
    FOR iX = 0 to 8
        szTempA$ = TRIM$(LCASE$(parse$(COMMAND$, "/", iX)))
        IF szTempA$ = "m" THEN pMenu = TRUE
        IF szTempA$ = "s" THEN pStatus = TRUE
        IF szTempA$ = "c" THEN pSubclass = TRUE
        IF szTempA$ = "?" THEN pHelp = TRUE
    NEXT

    ' get file name
    szTempA$ = TRIM$(parse$(COMMAND$, "/", 0))
    IF szTempA$ = "" THEN pHelp = TRUE

    ' check if file exists
    IF LOF(szTempA$) = -1 THEN
        ' file doesn't exist, add ext
        szFile$ = szTempA$ & ".dlg"
    ELSE
        ' file exists, leave it alone
        szFile$ = szTempA$
    END IF

    ' create output .bas file name
    szOutput$ = LCASE$(szTempA$)
    szOutput$ = REMOVE$(szOutput$, ".dlg")
    szOutput$ = szOutput$ & ".bas"

    ' check final orders (help or if file exists)
    IF pHelp = TRUE THEN
        PRINT "Dialog Converter v1.0 :: build 4121"
        PRINT "Converts Microsoft Dialog Editor text scripts to BCX code."
        PRINT ""
        PRINT "dc [drive:][path]filename[.dlg] [/m] [/s] [/c] [/?]"
        PRINT ""
        PRINT "  [drive:][path]filename[.dlg]"
        PRINT "     Specifies the file that you would like to convert."
        PRINT "     The drive, path, and dlg extention are optional."
        PRINT ""
        PRINT "  /m Adds menu-system to source code."
        PRINT "  /s Displays status while converting scripts."
        PRINT "  /c Adds control subclass to source code."
        PRINT "  /? Displays meanings of arguments."
    ELSEIF LOF(szFile$) = -1 THEN
        PRINT "error : could not open source file."
    ELSE
        prn(" - loading dialog file", TRUE)
        CALL Program_Load(szFile$, szOutput$)
    END IF

' #########################################################################

SUB Program_Load(szInput$, szOutput$)
'                szInput$   ' input dialog file
'                szOutput$  ' output bas file

    LOCAL szBuffer$
    LOCAL szTempA$
    LOCAL szTempB$
    LOCAL szTempC$
    LOCAL szTempD$
    LOCAL szTempE$
    LOCAL szID$
    LOCAL szHeight$
    LOCAL szWidth$
    LOCAL szLeft$
    LOCAL szTop$
    LOCAL iStatic
    LOCAL iListBox
    LOCAL iComboBox
    LOCAL iGroup
    LOCAL iIcon
    LOCAL iControl
    LOCAL iButton
    LOCAL iEdit
    LOCAL iCheckBox
    LOCAL iRadio
    LOCAL iVScroll
    LOCAL iHScroll
    LOCAL iFrame
    LOCAL iRect
    LOCAL iRichEdit
    LOCAL iDialog
    LOCAL iDialogF
    LOCAL iClass
    LOCAL iCaption
    LOCAL iTemp
    LOCAL iAnimate
    LOCAL iDate
    LOCAL iHotkey
    LOCAL iProgress
    LOCAL iMonth
    LOCAL iRebar
    LOCAL iStatus
    LOCAL iToolbar
    LOCAL iTooltip
    LOCAL iTrack
    LOCAL iUpDown
    LOCAL iComboEx
    LOCAL iHeader
    LOCAL iAddress
    LOCAL iListView
    LOCAL iPager
    LOCAL iTab
    LOCAL iTree

' *************************************************************************

    ' open output file
    OPEN szOutput$ FOR OUTPUT AS FPout

    ' print header
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "#")
    FPRINT FPout, szBuffer$
    FPRINT FPout, "'"
    FPRINT FPout, "'";
    szBuffer$ = REPEAT$(33, " ")
    FPRINT FPout, szBuffer$;
    FPRINT FPout, "Source Code Generated by Dialog Converter"
    FPRINT FPout, "'";
    szBuffer$ = REPEAT$(52, " ")
    FPRINT FPout, szBuffer$;
    FPRINT FPout, "for use with BCX 1.87+"
    FPRINT FPout, "'"
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "#")
    FPRINT FPout, szBuffer$
    FPRINT FPout, ""

' *************************************************************************

    OPEN szInput$ FOR INPUT AS FPin
    WHILE NOT EOF(FPin)
        LINE INPUT FPin, szBuffer$

        ' check for a new dialog to work with
        szBuffer$ = TRIM$(szBuffer$)
        IF LCASE$(parse$(szBuffer$, " ", 1)) = "dialog" THEN
            iCaption = FALSE
            iClass = FALSE
            iDialogF = TRUE
            INCR iDialog

            szTempA$ = TRIM$(STR$(iDialog))
            prn(" - found form", FALSE)
            prn(szTempA$, TRUE)
        END IF

        IF LCASE$(szBuffer$) = "begin" THEN
            IF iCaption = FALSE THEN
                ' generic title
                iCaption = FALSE

                FPRINT FPout, "CONST CaptionName";
                szTempA$ = TRIM$(STR$(iDialog))
                FPRINT FPout, szTempA$;
                FPRINT FPout, "$ = ";
                FPRINT FPout, CHR$(34);
                FPRINT FPout, "Caption Name";
                FPRINT FPout, CHR$(34)
            END IF
            IF iClass = FALSE THEN
                ' generic class
                iClass = FALSE

                FPRINT FPout, "CONST ClassName";
                szTempA$ = TRIM$(STR$(iDialog))
                FPRINT FPout, szTempA$;
                FPRINT FPout, "$ = ";
                FPRINT FPout, CHR$(34);
                FPRINT FPout, "Class Name";
                FPRINT FPout, CHR$(34)
                FPRINT FPout, ""
            END IF
            iDialogF = FALSE
        END IF

        IF iDialogF = TRUE THEN
            IF LCASE$(parse$(szBuffer$, " ", 0)) = "caption" THEN
                iCaption = TRUE

                FPRINT FPout, "CONST CaptionName";
                szTempA$ = TRIM$(STR$(iDialog))
                FPRINT FPout, szTempA$;
                FPRINT FPout, "$ = ";
                szTempA$ = RIGHT$(szBuffer$, LEN(szBuffer$) - 8)
                FPRINT FPout, szTempA$
            ELSEIF LCASE$(parse$(szBuffer$, " ", 0)) = "class" THEN
                iClass = TRUE

                FPRINT FPout, "CONST ClassName";
                szTempA$ = TRIM$(STR$(iDialog))
                FPRINT FPout, szTempA$;
                FPRINT FPout, "$ = ";
                szTempA$ = RIGHT$(szBuffer$, LEN(szBuffer$) - 6)
                FPRINT FPout, szTempA$
                FPRINT FPout, ""
            END IF
        END IF

        ' check if we have a dialog to work with
        IF iDialog > 0 THEN
            ' join lines
            szTempA$ = szTempA$ & " "
            szTempA$ = szTempA$ & TRIM$(szBuffer$)

            IF RIGHT$(TRIM$(szBuffer$), 1) <> "|" and RIGHT$(TRIM$(szBuffer$), 1) <> "," THEN
                szTempA$ = TRIM$(szTempA$)
                IF LCASE$(LEFT$(szTempA$, 7)) = "control" THEN
                    szTempB$ = TRIM$(LCASE$(parse$(szTempA$, ",", 2)))
                    szTempB$ = LEFT$(szTempB$, LEN(szTempB$) - 1)
                    szTempB$ = RIGHT$(szTempB$, LEN(szTempB$) - 1)
                    SELECT CASE szTempB$
                        CASE "richedit"           : pRich   = TRUE
                        CASE "richedit20w"        : pRich2  = TRUE
                        CASE "richedit20a"        : pRich2  = TRUE
                        CASE "sysanimate32"       : pCommon = TRUE
                        CASE "sysdatetimepick32"  : pCommon = TRUE
                        CASE "msctls_hotkey32"    : pCommon = TRUE
                        CASE "msctls_progress32"  : pCommon = TRUE
                        CASE "sysmonthcal32"      : pCommon = TRUE
                        CASE "rebarwindow32"      : pCommon = TRUE
                        CASE "msctls_statusbar32" : pCommon = TRUE
                        CASE "toolbarwindow32"    : pCommon = TRUE
                        CASE "tooltips_class32"   : pCommon = TRUE
                        CASE "msctls_trackbar32"  : pCommon = TRUE
                        CASE "msctls_updown32"    : pCommon = TRUE
                        CASE "comboboxex32"       : pCommon = TRUE
                        CASE "sysheader32"        : pCommon = TRUE
                        CASE "sysipaddress32"     : pCommon = TRUE
                        CASE "syslistview32"      : pCommon = TRUE
                        CASE "syspager"           : pCommon = TRUE
                        CASE "systabcontrol32"    : pCommon = TRUE
                        CASE "systreeview32"      : pCommon = TRUE
                    END SELECT
                END IF
                szTempA$ = ""
            END IF
        END IF
    WEND
    CLOSE FPin


' *************************************************************************

    IF pMenu = TRUE THEN
        FPRINT FPout, "CONST ID_Edit     =  1001   'Main Menu member"
        FPRINT FPout, "CONST ID_Options  =  1002   'Main Menu member"
        FPRINT FPout, "CONST ID_Open     =  1003   'File Menu member"
        FPRINT FPout, "CONST ID_Close    =  1004   'File Menu member"
        FPRINT FPout, "CONST ID_Save     =  1005   'File Menu member"
        FPRINT FPout, "CONST ID_SaveAs   =  1006   'File Menu member"
        FPRINT FPout, "CONST ID_Exit     =  1007   'File Menu member"
        FPRINT FPout, ""
        FPRINT FPout, "GLOBAL MainMenu  AS  HANDLE  'The Main Menu"
        FPRINT FPout, "GLOBAL FileMenu  AS  HANDLE  'The File Menu"
        FPRINT FPout, ""
    END IF

    FPRINT FPout, "GLOBAL BCX_GetDiaUnit"
    FPRINT FPout, "GLOBAL BCX_cxBaseUnit"
    FPRINT FPout, "GLOBAL BCX_cyBaseUnit"
    FPRINT FPout, "GLOBAL BCX_ScaleX"
    FPRINT FPout, "GLOBAL BCX_ScaleY"
    FPRINT FPout, ""
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "#")
    FPRINT FPout, szBuffer$
    FPRINT FPout, ""

    FPRINT FPout, "FUNCTION WinMain(hInst AS HINSTANCE, hPrev AS HINSTANCE, CmdLine AS LPSTR, CmdShow AS int)"
    FPRINT FPout, "LOCAL Wc  AS WNDCLASS"
    FPRINT FPout, "LOCAL Msg AS MSG"
    FPRINT FPout, ""
    FPRINT FPout, "IF FindFirstInstance(ClassName1$) THEN EXIT FUNCTION"
    FPRINT FPout, ""

    FOR iTemp = 1 to iDialog
        FPRINT FPout, "Wc.style           = CS_HREDRAW OR CS_VREDRAW OR CS_DBLCLKS"
        FPRINT FPout, "Wc.lpfnWndProc     = WndProc";
        szBuffer$ = TRIM$(STR$(iTemp))
        FPRINT FPout, szBuffer$
        FPRINT FPout, "Wc.cbClsExtra      = 0"
        FPRINT FPout, "Wc.cbWndExtra      = 0"
        FPRINT FPout, "Wc.hInstance       = hInst"
        FPRINT FPout, "Wc.hIcon           = LoadIcon     ( NULL,IDI_WINLOGO )"
        FPRINT FPout, "Wc.hCursor         = LoadCursor      ( NULL, IDC_ARROW )"
        FPRINT FPout, "Wc.hbrBackground = GetSysColorBrush(COLOR_BTNFACE)"
        FPRINT FPout, "Wc.lpszMenuName    = NULL"
        FPRINT FPout, "Wc.lpszClassName   = ClassName";
        szBuffer$ = TRIM$(STR$(iTemp))
        FPRINT FPout, szBuffer$;
        FPRINT FPout, "$"
        FPRINT FPout, ""
        FPRINT FPout, "RegisterClass(&Wc)"
    NEXT

    IF pRich = TRUE THEN
        FPRINT FPout, ""
        FPRINT FPout, "GLOBAL dllRich As HMODULE"
        FPRINT FPout, "dllRich = LoadLibrary(";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "RICHED32.DLL";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
    ELSEIF pRich2 = TRUE THEN
        FPRINT FPout, ""
        FPRINT FPout, "GLOBAL dllRich As HMODULE"
        FPRINT FPout, "dllRich = LoadLibrary(";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "RICHED20.DLL";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
    END IF

    IF pCommon = TRUE THEN
        FPRINT FPout, ""
        FPRINT FPout, "InitCommonControls()"
    END IF

    FPRINT FPout, ""
    FPRINT FPout, "FormLoad (hInst)"
    FPRINT FPout, ""
    FPRINT FPout, "WHILE GetMessage ( &Msg, NULL, 0 ,0 )"
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "*")
    FPRINT FPout, szBuffer$
    FPRINT FPout, "' The following allows tabbing between controls on Form1"
    FPRINT FPout, "'"
    FPRINT FPout, " IF NOT IsWindow(Form1) OR NOT IsDialogMessage(Form1,&Msg) THEN "
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "*")
    FPRINT FPout, szBuffer$
    FPRINT FPout, "  TranslateMessage ( &Msg )"
    FPRINT FPout, "  DispatchMessage  ( &Msg )"
    FPRINT FPout, " END IF"
    FPRINT FPout, "WEND"
    FPRINT FPout, "FUNCTION = Msg.wParam"
    FPRINT FPout, "END FUNCTION"
    FPRINT FPout, ""
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "#")
    FPRINT FPout, szBuffer$
    FPRINT FPout, ""

    FOR iTemp = 1 to iDialog
        FPRINT FPout, "FUNCTION WndProc";
        szBuffer$ = TRIM$(STR$(iTemp))
        FPRINT FPout, szBuffer$;
        FPRINT FPout, "(hWnd AS HWND, Msg as UINT, wParam AS WPARAM, lParam AS LPARAM) AS LRESULT CALLBACK"
        FPRINT FPout, "SELECT CASE Msg"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        IF pMenu = FALSE THEN
            FPRINT FPout, "' CASE WM_COMMAND"
        ELSE
            FPRINT FPout, " CASE WM_COMMAND"
            FPRINT FPout, "' ";
            szBuffer$ = REPEAT$(74, "*")
            FPRINT FPout, szBuffer$
            FPRINT FPout, "  IF LOWORD(wParam)=ID_Edit THEN"
            FPRINT FPout, "    MessageBox(Form1,";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "Edit";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",0)"
            FPRINT FPout, "  END IF"
            FPRINT FPout, ""
            FPRINT FPout, "  IF LOWORD(wParam)=ID_Options THEN"
            FPRINT FPout, "    MessageBox(Form1,";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "Options";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",0)"
            FPRINT FPout, "  END IF"
            FPRINT FPout, ""
            FPRINT FPout, "  IF LOWORD(wParam)=ID_Open THEN"
            FPRINT FPout, "    OpenFileDialog (0,";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "Open File";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "*.*";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "*.*";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "*.*";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",0)"
            FPRINT FPout, "  END IF"
            FPRINT FPout, ""
            FPRINT FPout, "  IF LOWORD(wParam)=ID_Close THEN"
            FPRINT FPout, "    MessageBox(Form1,";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "Close";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",0)"
            FPRINT FPout, "  END IF"
            FPRINT FPout, ""
            FPRINT FPout, "  IF LOWORD(wParam)=ID_Save THEN"
            FPRINT FPout, "    OpenFileDialog (0,";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "Save File";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "*.*";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "*.*";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "*.*";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",0)"
            FPRINT FPout, "  END IF"
            FPRINT FPout, ""
            FPRINT FPout, "  IF LOWORD(wParam)=ID_SaveAs THEN"
            FPRINT FPout, "    OpenFileDialog (0,";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "Save As...";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "*.*";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "*.*";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, "*.*";
            FPRINT FPout, CHR$(34);
            FPRINT FPout, ",0)"
            FPRINT FPout, "  END IF"
            FPRINT FPout, "  IF LOWORD(wParam)=ID_Exit THEN PostQuitMessage(0)"
        END IF
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "  CASE WM_CLOSE"
        FPRINT FPout, "  LOCAL id"
        FPRINT FPout, "  id = MessageBox(        _"
        FPRINT FPout, "       hWnd,              _"
        FPRINT FPout, "       ";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "Are you sure?";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ",   _"
        FPRINT FPout, "       ";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "Quit Program!";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ",   _"
        FPRINT FPout, "       MB_YESNO OR MB_ICONQUESTION )"
        FPRINT FPout, "  IF id = IDYES THEN DestroyWindow (hWnd)"
        FPRINT FPout, "  EXIT FUNCTION"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "  CASE WM_DESTROY "
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "  PostQuitMessage(0)"
        FPRINT FPout, "  EXIT FUNCTION"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "END SELECT"
        FPRINT FPout, "FUNCTION = DefWindowProc(hWnd,Msg,wParam,lParam)"
        FPRINT FPout, "END FUNCTION"
        FPRINT FPout, ""
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "#")
        FPRINT FPout, szBuffer$
        FPRINT FPout, ""
    NEXT

    FPRINT FPout, "SUB CenterWindow (hWnd AS HWND)"
    FPRINT FPout, "DIM wRect AS RECT"
    FPRINT FPout, "DIM x AS DWORD"
    FPRINT FPout, "DIM y AS DWORD"
    FPRINT FPout, "GetWindowRect (hWnd, &wRect)"
    FPRINT FPout, "x = (GetSystemMetrics ( SM_CXSCREEN)-(wRect.right-wRect.left))/2"
    FPRINT FPout, "y = (GetSystemMetrics ( SM_CYSCREEN)- _"
    FPRINT FPout, "    (wRect.bottom-wRect.top+GetSystemMetrics(SM_CYCAPTION)))/2"
    FPRINT FPout, "SetWindowPos (hWnd, NULL,x,y,0,0,SWP_NOSIZE OR SWP_NOZORDER)"
    FPRINT FPout, "END SUB"
    FPRINT FPout, ""
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "#")
    FPRINT FPout, szBuffer$
    FPRINT FPout, ""

    FPRINT FPout, "FUNCTION FindFirstInstance(ApplName$)"
    FPRINT FPout, "LOCAL hWnd AS HWND"
    FPRINT FPout, "hWnd = FindWindow (ApplName$,NULL)"
    FPRINT FPout, "IF hWnd THEN"
    FPRINT FPout, "  FUNCTION = TRUE"
    FPRINT FPout, "END IF"
    FPRINT FPout, "FUNCTION = FALSE"
    FPRINT FPout, "END FUNCTION"
    FPRINT FPout, ""
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "#")
    FPRINT FPout, szBuffer$
    FPRINT FPout, ""

    IF pMenu = TRUE THEN
        FPRINT FPout, "FUNCTION OpenFileDialog _"
        FPRINT FPout, "(                       _"
        FPRINT FPout, "    hWnd AS HWND      , _"
        FPRINT FPout, "    zCaption$         , _"
        FPRINT FPout, "    zFilespec$        , _"
        FPRINT FPout, "    zInitialDir$      , _"
        FPRINT FPout, "    zFilter$          , _"
        FPRINT FPout, "    zDefExtension$    , _"
        FPRINT FPout, "    Flags               _"
        FPRINT FPout, ")"
        FPRINT FPout, ""
        FPRINT FPout, "LOCAL ofn AS OPENFILENAME"
        FPRINT FPout, "LOCAL File$"
        FPRINT FPout, "LOCAL FileTitle$"
        FPRINT FPout, "LOCAL Filter$"
        FPRINT FPout, "LOCAL InitialDir$"
        FPRINT FPout, "LOCAL Title$"
        FPRINT FPout, "LOCAL DefExt$"
        FPRINT FPout, "LOCAL RetFlg"
        FPRINT FPout, ""
        FPRINT FPout, "IF Len(zInitialDir$) = 0 Then"
        FPRINT FPout, "  InitialDir$ = CURDIR$"
        FPRINT FPout, "End If"
        FPRINT FPout, ""
        FPRINT FPout, "Filter$               = zFilter$"
        FPRINT FPout, "InitialDir$           = zInitialDir$"
        FPRINT FPout, "File$                 = zFilespec$"
        FPRINT FPout, "DefExt$               = zDefExtension$"
        FPRINT FPout, "Title$                = zCaption$"
        FPRINT FPout, ""
        FPRINT FPout, "ofn.lStructSize       = SIZEOF(ofn)"
        FPRINT FPout, "ofn.hwndOwner         = hWnd"
        FPRINT FPout, "ofn.lpstrFilter       = Filter$"
        FPRINT FPout, "ofn.nFilterIndex      = 1"
        FPRINT FPout, "ofn.lpstrFile         = File$"
        FPRINT FPout, "ofn.nMaxFile          = SIZEOF(File$)"
        FPRINT FPout, "ofn.lpstrFileTitle    = FileTitle$"
        FPRINT FPout, "ofn.nMaxFileTitle     = SIZEOF(FileTitle$)"
        FPRINT FPout, "ofn.lpstrInitialDir   = InitialDir$"
        FPRINT FPout, "ofn.Flags             = Flags"
        FPRINT FPout, "ofn.lpstrDefExt       = DefExt$"
        FPRINT FPout, ""
        FPRINT FPout, "If Len(Title$) > 0 Then"
        FPRINT FPout, "  ofn.lpstrTitle       = Title$"
        FPRINT FPout, "End If"
        FPRINT FPout, ""
        FPRINT FPout, "RetFlg = GetOpenFileName(&ofn)"
        FPRINT FPout, ""
        FPRINT FPout, "zFilespec$ = File$"
        FPRINT FPout, "Flags    = ofn.Flags"
        FPRINT FPout, "Function = RetFlg"
        FPRINT FPout, "End Function"
        FPRINT FPout, ""
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "#")
        FPRINT FPout, szBuffer$
        FPRINT FPout, ""
    END IF

    FPRINT FPout, "SUB FormLoad ( hInst as HANDLE )"
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "*")
    FPRINT FPout, szBuffer$
    FPRINT FPout, "'               Scale Dialog Units To Screen Units"
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "*")
    FPRINT FPout, szBuffer$
    FPRINT FPout, ""
    FPRINT FPout, "BCX_GetDiaUnit = GetDialogBaseUnits()"
    FPRINT FPout, "BCX_cxBaseUnit = LOWORD(BCX_GetDiaUnit)"
    FPRINT FPout, "BCX_cyBaseUnit = HIWORD(BCX_GetDiaUnit)"
    FPRINT FPout, "BCX_ScaleX     = BCX_cxBaseUnit/4"
    FPRINT FPout, "BCX_ScaleY     = BCX_cyBaseUnit/8"

' *************************************************************************

    szBuffer$ = ""
    szTempA$ = ""
    iDialog = 0

' *************************************************************************

    ' read file again, this time, create controls
    OPEN szInput$ FOR INPUT AS FPin
    WHILE NOT EOF(FPin)
        LINE INPUT FPin, szBuffer$

        ' check for new dialog
        szBuffer$ = TRIM$(szBuffer$)
        IF LCASE$(parse$(szBuffer$, " ", 1)) = "dialog" THEN
            INCR iDialog

            'reset standard controls
            iStatic = 0
            iListBox = 0
            iComboBox = 0
            iGroup = 0
            iIcon = 0
            iControl = 0
            iButton = 0
            iEdit = 0
            iCheckBox = 0
            iRadio = 0
            iVScroll = 0
            iHScroll = 0
            iFrame = 0
            iRect = 0
            iRichEdit = 0
            iAnimate = 0
            iDate = 0
            iHotkey = 0
            iProgress = 0
            iMonth = 0
            iRebar = 0
            iStatus = 0
            iToolbar = 0
            iTooltip = 0
            iTrack = 0
            iUpDown = 0
            iComboEx = 0
            iHeader = 0
            iAddress = 0
            iListView = 0
            iPager = 0
            iTab = 0
            iTree = 0

            szLeft$ = parse$(szBuffer$, " ", 2)
            szLeft$ = LEFT$(szLeft$, LEN(szLeft$) - 1)
            szTop$ = parse$(szBuffer$, ",", 1)
            szWidth$ = parse$(szBuffer$, ",", 2)
            szHeight$ = parse$(szBuffer$, ",", 3)
        END IF

        ' check if we have a dialog to work with
        IF iDialog > 0 THEN
            ' join lines
            szTempA$ = szTempA$ & " "
            szTempA$ = szTempA$ & TRIM$(szBuffer$)

            IF RIGHT$(TRIM$(szBuffer$), 1) <> "|" and RIGHT$(TRIM$(szBuffer$), 1) <> "," THEN
                ' attempt to reformat line
                szTempA$ = TRIM$(szTempA$)              ' trim spaces
                szTempC$ = parse$(szTempA$, " ", 0)     ' search for control name
                szTempB$ = szTempC$                     ' add control to string
                szTempD$ = SPACE$(16 - LEN(szTempC$))   ' create padding
                szTempB$ = szTempB$ & szTempD$          ' add padding to string

                ' get control properties
                szTempD$ = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - LEN(szTempC$)))

                ' uncomment to change from pipe to "or"
                ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ' also modify the AddStyle procedure
                ' szTempD$ = REPLACE$(szTempD$, "|", "or")

                ' add properties to string
                szTempA$ = szTempB$ & szTempD$
                IF LCASE$(LEFT$(szTempA$, 5)) = "style" THEN
                    FPRINT FPout, ""
                    FPRINT FPout, "' ";
                    szBuffer$ = REPEAT$(74, "*")
                    FPRINT FPout, szBuffer$
                    FPRINT FPout, ""
                    szTempB$ = RIGHT$(szTempA$, LEN(szTempA$) - 6)

                    FPRINT FPout, "GLOBAL Form";
                    szTempA$ = TRIM$(STR$(iDialog))
                    FPRINT FPout, szTempA$;
                    FPRINT FPout, " AS HANDLE"
                    FPRINT FPout, ""
                    FPRINT FPout, "Form";
                    FPRINT FPout, szTempA$;
                    FPRINT FPout, " = CreateWindow(ClassName";
                    FPRINT FPout, szTempA$;
                    FPRINT FPout, "$,CaptionName";
                    FPRINT FPout, szTempA$;
                    FPRINT FPout, "$,";
                    FPRINT FPout, szTempB$;
                    FPRINT FPout, ",";
                    FPRINT FPout, szLeft$;
                    FPRINT FPout, "*BCX_ScaleX,";
                    FPRINT FPout, szTop$;
                    FPRINT FPout, "*BCX_ScaleY,(4+";
                    FPRINT FPout, szWidth$;
                    FPRINT FPout, ")*BCX_ScaleX,(12+";
                    FPRINT FPout, szHeight$;
                    FPRINT FPout, ")*BCX_ScaleY,NULL,NULL,hInst,NULL)"
                ELSEIF LCASE$(LEFT$(szTempA$, 5)) = "ltext" THEN
                    INCR iStatic
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".static", FALSE)
                    szTempB$ = TRIM$(STR$(iStatic))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = parse$(szTempA$, ",", 0) ' text
                    szID$     = parse$(szTempA$, ",", 1) ' id
                    szLeft$   = parse$(szTempA$, ",", 2) ' left
                    szTop$    = parse$(szTempA$, ",", 3) ' top
                    szHeight$ = parse$(szTempA$, ",", 4) ' height
                    szWidth$  = parse$(szTempA$, ",", 5) ' width
                    szTempC$  = parse$(szTempA$, ",", 6) ' style
                    szTempD$  = CHR$(34) & "static"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("SS_LEFT", szTempC$)
                    szTempC$  = AddStyle("SS_NOTIFY", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("","Static", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iStatic, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 5)) = "ctext" THEN
                    INCR iStatic
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".static", FALSE)
                    szTempB$ = TRIM$(STR$(iStatic))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = parse$(szTempA$, ",", 0) ' text
                    szID$     = parse$(szTempA$, ",", 1) ' id
                    szLeft$   = parse$(szTempA$, ",", 2) ' left
                    szTop$    = parse$(szTempA$, ",", 3) ' top
                    szHeight$ = parse$(szTempA$, ",", 4) ' height
                    szWidth$  = parse$(szTempA$, ",", 5) ' width
                    szTempC$  = parse$(szTempA$, ",", 6) ' style
                    szTempD$  = CHR$(34) & "static"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("SS_CENTER", szTempC$)
                    szTempC$  = AddStyle("SS_NOTIFY", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("","Static", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iStatic, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 5)) = "rtext" THEN
                    INCR iStatic
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".static", FALSE)
                    szTempB$ = TRIM$(STR$(iStatic))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = parse$(szTempA$, ",", 0) ' text
                    szID$     = parse$(szTempA$, ",", 1) ' id
                    szLeft$   = parse$(szTempA$, ",", 2) ' left
                    szTop$    = parse$(szTempA$, ",", 3) ' top
                    szHeight$ = parse$(szTempA$, ",", 4) ' height
                    szWidth$  = parse$(szTempA$, ",", 5) ' width
                    szTempC$  = parse$(szTempA$, ",", 6) ' style
                    szTempD$  = CHR$(34) & "static"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("SS_RIGHT", szTempC$)
                    szTempC$  = AddStyle("SS_NOTIFY", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("","Static", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iStatic, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 8)) = "edittext" THEN
                    INCR iEdit
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".edit", FALSE)
                    szTempB$ = TRIM$(STR$(iEdit))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szID$     = parse$(szTempA$, ",", 0) ' id
                    szLeft$   = parse$(szTempA$, ",", 1) ' left
                    szTop$    = parse$(szTempA$, ",", 2) ' top
                    szHeight$ = parse$(szTempA$, ",", 3) ' height
                    szWidth$  = parse$(szTempA$, ",", 4) ' width
                    szTempC$  = parse$(szTempA$, ",", 5) ' style
                    szTempD$  = CHR$(34) & "edit"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("WS_TABSTOP", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("WS_EX_CLIENTEDGE","Edit", szID$, szTempD$, "NULL", szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iEdit, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 8)) = "groupbox" THEN
                    INCR iGroup
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".group", FALSE)
                    szTempB$ = TRIM$(STR$(iGroup))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = parse$(szTempA$, ",", 0) ' text
                    szID$     = parse$(szTempA$, ",", 1) ' id
                    szLeft$   = parse$(szTempA$, ",", 2) ' left
                    szTop$    = parse$(szTempA$, ",", 3) ' top
                    szHeight$ = parse$(szTempA$, ",", 4) ' height
                    szWidth$  = parse$(szTempA$, ",", 5) ' width
                    szTempC$  = parse$(szTempA$, ",", 6) ' style
                    szTempD$  = CHR$(34) & "button"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("BS_GROUPBOX", szTempC$)
                    'szTempC$  = AddStyle("WS_TABSTOP", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("","Group", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iGroup, FALSE, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 10)) = "pushbutton" THEN
                    INCR iButton
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".button", FALSE)
                    szTempB$ = TRIM$(STR$(iButton))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = parse$(szTempA$, ",", 0) ' text
                    szID$     = parse$(szTempA$, ",", 1) ' id
                    szLeft$   = parse$(szTempA$, ",", 2) ' left
                    szTop$    = parse$(szTempA$, ",", 3) ' top
                    szHeight$ = parse$(szTempA$, ",", 4) ' height
                    szWidth$  = parse$(szTempA$, ",", 5) ' width
                    szTempC$  = parse$(szTempA$, ",", 6) ' style
                    szTempD$  = CHR$(34) & "button"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("BS_PUSHBUTTON", szTempC$)
                    szTempC$  = AddStyle("WS_TABSTOP", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("","Button", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iButton, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 13)) = "defpushbutton" THEN
                    INCR iButton
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".button", FALSE)
                    szTempB$ = TRIM$(STR$(iButton))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = parse$(szTempA$, ",", 0) ' text
                    szID$     = parse$(szTempA$, ",", 1) ' id
                    szLeft$   = parse$(szTempA$, ",", 2) ' left
                    szTop$    = parse$(szTempA$, ",", 3) ' top
                    szHeight$ = parse$(szTempA$, ",", 4) ' height
                    szWidth$  = parse$(szTempA$, ",", 5) ' width
                    szTempC$  = parse$(szTempA$, ",", 6) ' style
                    szTempD$  = CHR$(34) & "button"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("BS_PUSHBUTTON", szTempC$)
                    szTempC$  = AddStyle("WS_TABSTOP", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    szTempC$  = AddStyle("BS_DEFPUSHBUTTON", szTempC$)
                    GenerateControl("","Button", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iButton, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 8)) = "checkbox" THEN
                    INCR iCheckBox
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".checkbox", FALSE)
                    szTempB$ = TRIM$(STR$(iCheckBox))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = parse$(szTempA$, ",", 0) ' text
                    szID$     = parse$(szTempA$, ",", 1) ' id
                    szLeft$   = parse$(szTempA$, ",", 2) ' left
                    szTop$    = parse$(szTempA$, ",", 3) ' top
                    szHeight$ = parse$(szTempA$, ",", 4) ' height
                    szWidth$  = parse$(szTempA$, ",", 5) ' width
                    szTempC$  = parse$(szTempA$, ",", 6) ' style
                    szTempD$  = CHR$(34) & "button"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("BS_CHECKBOX", szTempC$)
                    szTempC$  = AddStyle("WS_TABSTOP", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("","CheckBox", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iCheckBox, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 11)) = "radiobutton" THEN
                    INCR iRadio
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".radio", FALSE)
                    szTempB$ = TRIM$(STR$(iRadio))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = parse$(szTempA$, ",", 0) ' text
                    szID$     = parse$(szTempA$, ",", 1) ' id
                    szLeft$   = parse$(szTempA$, ",", 2) ' left
                    szTop$    = parse$(szTempA$, ",", 3) ' top
                    szHeight$ = parse$(szTempA$, ",", 4) ' height
                    szWidth$  = parse$(szTempA$, ",", 5) ' width
                    szTempC$  = parse$(szTempA$, ",", 6) ' style
                    szTempD$  = CHR$(34) & "button"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("BS_AUTORADIOBUTTON", szTempC$)
                    szTempC$  = AddStyle("WS_TABSTOP", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("","Radio", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iRadio, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 8)) = "combobox" THEN
                    INCR iComboBox
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".combobox", FALSE)
                    szTempB$ = TRIM$(STR$(iComboBox))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = CHR$(34) & CHR$(34)
                    szID$     = parse$(szTempA$, ",", 0) ' id
                    szLeft$   = parse$(szTempA$, ",", 1) ' left
                    szTop$    = parse$(szTempA$, ",", 2) ' top
                    szHeight$ = parse$(szTempA$, ",", 3) ' height
                    szWidth$  = parse$(szTempA$, ",", 4) ' width
                    szTempC$  = parse$(szTempA$, ",", 5) ' style
                    szTempD$  = CHR$(34) & "ComboBox"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("WS_EX_CLIENTEDGE","ComboBox", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iComboBox, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 7)) = "listbox" THEN
                    INCR iListBox
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".listbox", FALSE)
                    szTempB$ = TRIM$(STR$(iListBox))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = CHR$(34) & CHR$(34)
                    szID$     = parse$(szTempA$, ",", 0) ' id
                    szLeft$   = parse$(szTempA$, ",", 1) ' left
                    szTop$    = parse$(szTempA$, ",", 2) ' top
                    szHeight$ = parse$(szTempA$, ",", 3) ' height
                    szWidth$  = parse$(szTempA$, ",", 4) ' width
                    szTempC$  = parse$(szTempA$, ",", 5) ' style
                    szTempD$  = CHR$(34) & "ListBox"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    szTempC$  = AddStyle("LBS_STANDARD", szTempC$)
                    GenerateControl("WS_EX_CLIENTEDGE","ListBox", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iListBox, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 4)) = "icon" THEN
                    INCR iIcon
                    szTempB$ = TRIM$(STR$(iDialog))
                    prn(" - found form", FALSE)
                    prn(szTempB$, FALSE)
                    prn(".icon", FALSE)
                    szTempB$ = TRIM$(STR$(iIcon))
                    prn(szTempB$, TRUE)
                    ' ==========
                    szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                    szTempB$  = CHR$(34) & CHR$(34)
                    szID$     = parse$(szTempA$, ",", 1) ' id
                    szLeft$   = parse$(szTempA$, ",", 2) ' left
                    szTop$    = parse$(szTempA$, ",", 3) ' top
                    szHeight$ = parse$(szTempA$, ",", 4) ' height
                    szWidth$  = parse$(szTempA$, ",", 5) ' width
                    szTempC$  = parse$(szTempA$, ",", 6) ' style
                    szTempD$  = CHR$(34) & "static"
                    szTempD$  = szTempD$ & CHR$(34)
                    szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                    szTempC$  = AddStyle("SS_ICON", szTempC$)
                    szTempC$  = AddStyle("SS_NOTIFY", szTempC$)
                    szTempC$  = AddStyle("WS_CHILD", szTempC$)
                    GenerateControl("","Icon", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iIcon, pSubclass, FPout)
                ELSEIF LCASE$(LEFT$(szTempA$, 9)) = "scrollbar" THEN
                    IF INSTR(LCASE$(szTempA$), "sbs_vert") > 0 THEN
                        INCR iVScroll
                        szTempB$ = TRIM$(STR$(iDialog))
                        prn(" - found form", FALSE)
                        prn(szTempB$, FALSE)
                        prn(".vscroll", FALSE)
                        szTempB$ = TRIM$(STR$(iVScroll))
                        prn(szTempB$, TRUE)
                        ' ==========
                        szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                        szTempB$  = CHR$(34) & CHR$(34)
                        szID$     = parse$(szTempA$, ",", 0) ' id
                        szLeft$   = parse$(szTempA$, ",", 1) ' left
                        szTop$    = parse$(szTempA$, ",", 2) ' top
                        szHeight$ = parse$(szTempA$, ",", 3) ' height
                        szWidth$  = parse$(szTempA$, ",", 4) ' width
                        szTempC$  = parse$(szTempA$, ",", 5) ' style
                        szTempD$  = CHR$(34) & "scrollbar"
                        szTempD$  = szTempD$ & CHR$(34)
                        szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                        szTempC$  = AddStyle("WS_TABSTOP", szTempC$)
                        szTempC$  = AddStyle("WS_CHILD", szTempC$)
                        GenerateControl("","VScroll", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iVScroll, pSubclass, FPout)
                    ELSE
                        INCR iHScroll
                        szTempB$ = TRIM$(STR$(iDialog))
                        prn(" - found form", FALSE)
                        prn(szTempB$, FALSE)
                        prn(".hscroll", FALSE)
                        szTempB$ = TRIM$(STR$(iHScroll))
                        prn(szTempB$, TRUE)
                        ' ==========
                        szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                        szTempB$  = CHR$(34) & CHR$(34)
                        szID$     = parse$(szTempA$, ",", 0) ' id
                        szLeft$   = parse$(szTempA$, ",", 1) ' left
                        szTop$    = parse$(szTempA$, ",", 2) ' top
                        szHeight$ = parse$(szTempA$, ",", 3) ' height
                        szWidth$  = parse$(szTempA$, ",", 4) ' width
                        szTempC$  = parse$(szTempA$, ",", 5) ' style
                        szTempD$  = CHR$(34) & "scrollbar"
                        szTempD$  = szTempD$ & CHR$(34)
                        szTempC$  = AddStyle("SB_HORZ", szTempC$)
                        szTempC$  = AddStyle("WS_VISIBLE", szTempC$)
                        szTempC$  = AddStyle("WS_TABSTOP", szTempC$)
                        szTempC$  = AddStyle("WS_CHILD", szTempC$)
                        GenerateControl("","HScroll", szID$, szTempD$, szTempB$, szTempC$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iHScroll, pSubclass, FPout)
                    END IF
                ELSEIF LCASE$(LEFT$(szTempA$, 7)) = "control" THEN
                    szTempB$ = TRIM$(LCASE$(parse$(szTempA$, ",", 2)))
                    szTempB$ = LEFT$(szTempB$, LEN(szTempB$) - 1)
                    szTempB$ = RIGHT$(szTempB$, LEN(szTempB$) - 1)
                    SELECT CASE szTempB$
                        CASE "static"
                        IF INSTR(LCASE$(szTempA$), "ss_blackframe") or INSTR(LCASE$(szTempA$), "ss_grayframe") THEN
                            INCR iFrame
                            szTempC$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempC$, FALSE)
                            prn(".frame", FALSE)
                            szTempC$ = TRIM$(STR$(iFrame))
                            prn(szTempC$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempE$  = CHR$(34) & "static"
                            szTempE$  = szTempE$ & CHR$(34)
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("SS_NOTIFY", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","Frame", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iFrame, pSubclass, FPout)
                        ELSEIF INSTR(LCASE$(szTempA$), "ss_whiterect") or INSTR(LCASE$(szTempA$), "ss_grayrect") or INSTR(LCASE$(szTempA$), "ss_blackrect") THEN
                            INCR iRect
                            szTempC$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempC$, FALSE)
                            prn(".rect", FALSE)
                            szTempC$ = TRIM$(STR$(iRect))
                            prn(szTempC$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempE$  = CHR$(34) & "static"
                            szTempE$  = szTempE$ & CHR$(34)
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("SS_NOTIFY", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","Rect", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iRect, pSubclass, FPout)
                        ELSE
                            INCR iStatic
                            szTempC$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempC$, FALSE)
                            prn(".static", FALSE)
                            szTempC$ = TRIM$(STR$(iStatic))
                            prn(szTempC$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempE$  = CHR$(34) & "static"
                            szTempE$  = szTempE$ & CHR$(34)
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("SS_NOTIFY", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","Static", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iStatic, pSubclass, FPout)
                        END IF
                        CASE "button"
                        IF INSTR(LCASE$(szTempA$), "bs_autocheckbox") or INSTR(LCASE$(szTempA$), "bs_auto3state") or INSTR(LCASE$(szTempA$), "bs_3state") THEN
                            INCR iCheckBox
                            szTempC$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempC$, FALSE)
                            prn(".checkbox", FALSE)
                            szTempC$ = TRIM$(STR$(iCheckBox))
                            prn(szTempC$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempE$  = CHR$(34) & "button"
                            szTempE$  = szTempE$ & CHR$(34)
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","CheckBox", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iCheckBox, pSubclass, FPout)
                        ELSEIF INSTR(LCASE$(szTempA$),"bs_autoradiobutton") THEN
                            INCR iRadio
                            szTempC$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempC$, FALSE)
                            prn(".radio", FALSE)
                            szTempC$ = TRIM$(STR$(iRadio))
                            prn(szTempC$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempE$  = CHR$(34) & "button"
                            szTempE$  = szTempE$ & CHR$(34)
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","Radio", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iRadio, pSubclass, FPout)
                        ELSE
                            INCR iButton
                            szTempC$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempC$, FALSE)
                            prn(".button", FALSE)
                            szTempC$ = TRIM$(STR$(iButton))
                            prn(szTempC$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempE$  = CHR$(34) & "button"
                            szTempE$  = szTempE$ & CHR$(34)
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","Button", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iButton, pSubclass, FPout)
                        END IF
                        CASE "richedit20a"
                            INCR iRichEdit
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".richedit", FALSE)
                            szTempB$ = TRIM$(STR$(iRichEdit))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("WS_EX_CLIENTEDGE","RichEdit", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iRichEdit, pSubclass, FPout)
                        CASE "richedit20w"
                            INCR iRichEdit
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".richedit", FALSE)
                            szTempB$ = TRIM$(STR$(iRichEdit))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("WS_EX_CLIENTEDGE","RichEdit", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iRichEdit, pSubclass, FPout)
                        CASE "richedit"
                            INCR iRichEdit
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".richedit", FALSE)
                            szTempB$ = TRIM$(STR$(iRichEdit))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("WS_EX_CLIENTEDGE","RichEdit", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iRichEdit, pSubclass, FPout)
                        CASE "sysanimate32"
                            INCR iAnimate
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".animate", FALSE)
                            szTempB$ = TRIM$(STR$(iAnimate))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","Animate", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iAnimate, pSubclass, FPout)
                        CASE "sysdatetimepick32"
                            INCR iDate
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".datepicker", FALSE)
                            szTempB$ = TRIM$(STR$(iDate))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","DatePicker", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iDate, pSubclass, FPout)
                        CASE "msctls_hotkey32"
                            INCR iHotkey
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".hotkey", FALSE)
                            szTempB$ = TRIM$(STR$(iHotkey))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","HotKey", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iHotkey, pSubclass, FPout)
                        CASE "msctls_progress32"
                            INCR iProgress
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".progressbar", FALSE)
                            szTempB$ = TRIM$(STR$(iProgress))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","ProgressBar", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iProgress, pSubclass, FPout)
                        CASE "sysmonthcal32"
                            INCR iMonth
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".monthcal", FALSE)
                            szTempB$ = TRIM$(STR$(iMonth))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","MonthCal", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iMonth, pSubclass, FPout)
                        CASE "rebarwindow32"
                            INCR iRebar
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".rebar", FALSE)
                            szTempB$ = TRIM$(STR$(iRebar))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","ReBar", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iRebar, pSubclass, FPout)
                        CASE "msctls_statusbar32"
                            INCR iStatus
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".statusbar", FALSE)
                            szTempB$ = TRIM$(STR$(iStatus))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","StatusBar", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iStatus, pSubclass, FPout)
                        CASE "toolbarwindow32"
                            INCR iToolbar
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".toolbar", FALSE)
                            szTempB$ = TRIM$(STR$(iToolbar))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","ToolBar", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iToolbar, pSubclass, FPout)
                        CASE "tooltips_class32"
                            INCR iTooltip
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".tooltips", FALSE)
                            szTempB$ = TRIM$(STR$(iTooltip))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","ToolTips", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iTooltip, pSubclass, FPout)
                        CASE "msctls_trackbar32"
                            INCR iTrack
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".trackbar", FALSE)
                            szTempB$ = TRIM$(STR$(iTrack))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","TrackBar", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iTrack, pSubclass, FPout)
                        CASE "msctls_updown32"
                            INCR iUpDown
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".updown", FALSE)
                            szTempB$ = TRIM$(STR$(iUpDown))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","UpDown", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iUpDown, pSubclass, FPout)
                        CASE "comboboxex32"
                            INCR iComboEx
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".comboboxex", FALSE)
                            szTempB$ = TRIM$(STR$(iComboEx))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("WS_EX_CLIENTEDGE","ComboBoxEx", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iComboEx, pSubclass, FPout)
                        CASE "sysheader32"
                            INCR iHeader
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".header", FALSE)
                            szTempB$ = TRIM$(STR$(iHeader))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","Header", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iHeader, pSubclass, FPout)
                        CASE "sysipaddress32"
                            INCR iAddress
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".ipaddress", FALSE)
                            szTempB$ = TRIM$(STR$(iAddress))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("WS_EX_CLIENTEDGE","IPAddress", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iAddress, pSubclass, FPout)
                        CASE "syslistview32"
                            INCR iListView
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".listview", FALSE)
                            szTempB$ = TRIM$(STR$(iListView))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("WS_EX_CLIENTEDGE","ListView", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iListView, pSubclass, FPout)
                        CASE "syspager"
                            INCR iPager
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".pager", FALSE)
                            szTempB$ = TRIM$(STR$(iPager))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","Pager", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iPager, pSubclass, FPout)
                        CASE "systabcontrol32"
                            INCR iTab
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".tab", FALSE)
                            szTempB$ = TRIM$(STR$(iTab))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("","TabControl", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iTab, pSubclass, FPout)
                        CASE "systreeview32"
                            INCR iTree
                            szTempB$ = TRIM$(STR$(iDialog))
                            prn(" - found form", FALSE)
                            prn(szTempB$, FALSE)
                            prn(".treeview", FALSE)
                            szTempB$ = TRIM$(STR$(iTree))
                            prn(szTempB$, TRUE)
                            ' ==========
                            szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                            szTempC$  = parse$(szTempA$, ",", 0) ' text
                            szID$     = parse$(szTempA$, ",", 1) ' id
                            szTempE$  = parse$(szTempA$, ",", 2) ' class
                            szTempD$  = parse$(szTempA$, ",", 3) ' style
                            szLeft$   = parse$(szTempA$, ",", 4) ' left
                            szTop$    = parse$(szTempA$, ",", 5) ' top
                            szHeight$ = parse$(szTempA$, ",", 6) ' height
                            szWidth$  = parse$(szTempA$, ",", 7) ' width
                            szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                            szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                            szTempD$  = AddStyle("WS_CHILD", szTempD$)
                            GenerateControl("WS_EX_CLIENTEDGE","TreeView", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iTree, pSubclass, FPout)
                    ELSE
                        INCR iControl
                        szTempB$ = TRIM$(STR$(iDialog))
                        prn(" - found form", FALSE)
                        prn(szTempB$, FALSE)
                        prn(".control", FALSE)
                        szTempB$ = TRIM$(STR$(iControl))
                        prn(szTempB$, TRUE)
                        ' ==========
                        szTempA$  = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - 16))
                        szTempC$  = parse$(szTempA$, ",", 0) ' text
                        szID$     = parse$(szTempA$, ",", 1) ' id
                        szTempE$  = parse$(szTempA$, ",", 2) ' class
                        szTempD$  = parse$(szTempA$, ",", 3) ' style
                        szLeft$   = parse$(szTempA$, ",", 4) ' left
                        szTop$    = parse$(szTempA$, ",", 5) ' top
                        szHeight$ = parse$(szTempA$, ",", 6) ' height
                        szWidth$  = parse$(szTempA$, ",", 7) ' width
                        szTempD$  = AddStyle("WS_VISIBLE", szTempD$)
                        szTempD$  = AddStyle("WS_TABSTOP", szTempD$)
                        szTempD$  = AddStyle("WS_CHILD", szTempD$)
                        GenerateControl("","Control", szID$, szTempE$, szTempC$, szTempD$, szLeft$, szTop$, szHeight$, szWidth$, iDialog, iControl, pSubclass, FPout)
                    END SELECT
                END IF
                szTempA$ = ""
            END IF
        END IF
    WEND
    CLOSE FPin

' *************************************************************************

    IF pMenu = TRUE THEN
        FPRINT FPout, ""
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "'                          Start Building Menus"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, " MainMenu   =  CreateMenu()   ' CreateMenu returns a MENU HANDLE"
        FPRINT FPout, " FileMenu   =  CreateMenu()   ' CreateMenu returns a MENU HANDLE"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "'                     Build the File Menu First"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "AppendMenu(FileMenu,MF_STRING   ,ID_Open  ,";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "&Open";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "AppendMenu(FileMenu,MF_STRING   ,ID_Save  ,";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "&Save";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "AppendMenu(FileMenu,MF_STRING   ,ID_SaveAs,";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "Save&As";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "AppendMenu(FileMenu,MF_SEPARATOR,    0    ,";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "AppendMenu(FileMenu,MF_STRING   ,ID_Close ,";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "&Close";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "AppendMenu(FileMenu,MF_SEPARATOR,    0    ,";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "AppendMenu(FileMenu,MF_STRING   ,ID_Exit  ,";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "E&xit";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "'                        Build the Main Menu Next"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "AppendMenu ( MainMenu , MF_STRING , ID_Edit    , ";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "Edit";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "AppendMenu ( MainMenu , MF_STRING , ID_Options , ";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "Options";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "'                  Attach the File menu to the main menu"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "InsertMenu ( MainMenu, ID_Edit , MF_POPUP , FileMenu ,";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, "File";
        FPRINT FPout, CHR$(34);
        FPRINT FPout, ")"
        FPRINT FPout, "' ";
        szBuffer$ = REPEAT$(74, "*")
        FPRINT FPout, szBuffer$
        FPRINT FPout, "SetMenu(Form1,MainMenu)              ' Activate the menu"
    END IF

' *************************************************************************

    FPRINT FPout, ""
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "*")
    FPRINT FPout, szBuffer$
    FPRINT FPout, ""
    FOR iTemp = 1 to iDialog
        FPRINT FPout, "CenterWindow (Form";
        szBuffer$ = TRIM$(STR$(iTemp))
        FPRINT FPout, szBuffer$;
        FPRINT FPout, ")   ' Center our Form on the screen"
        FPRINT FPout, "UpdateWindow (Form";
        szBuffer$ = TRIM$(STR$(iTemp))
        FPRINT FPout, szBuffer$;
        FPRINT FPout, ")   ' Force update of all controls"
        FPRINT FPout, "ShowWindow   (Form";
        szBuffer$ = TRIM$(STR$(iTemp))
        FPRINT FPout, szBuffer$;
        FPRINT FPout, ",1) ' Display our creation!"
    NEXT
    FPRINT FPout, "END SUB"

' *************************************************************************

    ' do subclass generation
    iDialog = 0
    IF pSubclass = TRUE THEN
        OPEN szInput$ FOR INPUT AS FPin
        WHILE NOT EOF(FPin)
            LINE INPUT FPin, szBuffer$

            ' check for new dialog
            szBuffer$ = TRIM$(szBuffer$)
            IF LCASE$(parse$(szBuffer$, " ", 1)) = "dialog" THEN
                INCR iDialog

                'reset standard controls
                iStatic = 0
                iListBox = 0
                iComboBox = 0
                iGroup = 0
                iIcon = 0
                iControl = 0
                iButton = 0
                iEdit = 0
                iCheckBox = 0
                iRadio = 0
                iVScroll = 0
                iHScroll = 0
                iFrame = 0
                iRect = 0
                iRichEdit = 0
                iAnimate = 0
                iDate = 0
                iHotkey = 0
                iProgress = 0
                iMonth = 0
                iRebar = 0
                iStatus = 0
                iToolbar = 0
                iTooltip = 0
                iTrack = 0
                iUpDown = 0
                iComboEx = 0
                iHeader = 0
                iAddress = 0
                iListView = 0
                iPager = 0
                iTab = 0
                iTree = 0
            END IF

            ' check if we have a dialog to work with
            IF iDialog > 0 THEN
                ' join lines
                szTempA$ = szTempA$ & " "
                szTempA$ = szTempA$ & TRIM$(szBuffer$)

                IF RIGHT$(TRIM$(szBuffer$), 1) <> "|" and RIGHT$(TRIM$(szBuffer$), 1) <> "," THEN
                    ' attempt to reformat line
                    szTempA$ = TRIM$(szTempA$)              ' trim spaces
                    szTempC$ = parse$(szTempA$, " ", 0)     ' search for control name
                    szTempB$ = szTempC$                     ' add control to string
                    szTempD$ = SPACE$(16 - LEN(szTempC$))   ' create padding
                    szTempB$ = szTempB$ & szTempD$          ' add padding to string

                    ' get control properties
                    szTempD$ = TRIM$(RIGHT$(szTempA$, LEN(szTempA$) - LEN(szTempC$)))
                    szTempA$ = szTempB$ & szTempD$          ' add properties to string

                    IF LCASE$(LEFT$(szTempA$, 5)) = "ltext" THEN
                        INCR iStatic
                        GenerateProc("Static", iDialog, iStatic, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 5)) = "ctext" THEN
                        INCR iStatic
                        GenerateProc("Static", iDialog, iStatic, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 5)) = "rtext" THEN
                        INCR iStatic
                        GenerateProc("Static", iDialog, iStatic, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 8)) = "edittext" THEN
                        INCR iEdit
                        GenerateProc("Edit", iDialog, iEdit, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 10)) = "pushbutton" THEN
                        INCR iButton
                        GenerateProc("Button", iDialog, iButton, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 13)) = "defpushbutton" THEN
                        INCR iButton
                        GenerateProc("Button", iDialog, iButton, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 8)) = "checkbox" THEN
                        INCR iCheckBox
                        GenerateProc("CheckBox", iDialog, iCheckBox, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 11)) = "radiobutton" THEN
                        INCR iRadio
                        GenerateProc("Radio", iDialog, iRadio, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 8)) = "combobox" THEN
                        INCR iComboBox
                        GenerateProc("ComboBox", iDialog, iComboBox, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 7)) = "listbox" THEN
                        INCR iListBox
                        GenerateProc("ListBox", iDialog, iListBox, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 4)) = "icon" THEN
                        INCR iIcon
                        GenerateProc("Icon", iDialog, iIcon, FPout)
                    ELSEIF LCASE$(LEFT$(szTempA$, 9)) = "scrollbar" THEN
                        IF INSTR(LCASE$(szTempA$), "sbs_vert") > 0 THEN
                            INCR iVScroll
                            GenerateProc("VScroll", iDialog, iVScroll, FPout)
                        ELSE
                            INCR iHScroll
                            GenerateProc("HScroll", iDialog, iHScroll, FPout)
                        END IF
                    ELSEIF LCASE$(LEFT$(szTempA$, 7)) = "control" THEN
                        szTempB$ = TRIM$(LCASE$(parse$(szTempA$, ",", 2)))
                        szTempB$ = LEFT$(szTempB$, LEN(szTempB$) - 1)
                        szTempB$ = RIGHT$(szTempB$, LEN(szTempB$) - 1)
                        SELECT CASE szTempB$
                            CASE "static"
                            IF INSTR(LCASE$(szTempA$), "ss_blackframe") or INSTR(LCASE$(szTempA$), "ss_grayframe") THEN
                                INCR iFrame
                                GenerateProc("Frame", iDialog, iFrame, FPout)
                            ELSEIF INSTR(LCASE$(szTempA$), "ss_whiterect") or INSTR(LCASE$(szTempA$), "ss_grayrect") or INSTR(LCASE$(szTempA$), "ss_blackrect") THEN
                                INCR iRect
                                GenerateProc("Rect", iDialog, iRect, FPout)
                            ELSE
                                INCR iStatic
                                GenerateProc("Static", iDialog, iStatic, FPout)
                            END IF
                            CASE "button"
                            IF INSTR(LCASE$(szTempA$), "bs_autocheckbox") or INSTR(LCASE$(szTempA$), "bs_auto3state") or INSTR(LCASE$(szTempA$), "bs_3state") THEN
                                INCR iCheckBox
                                GenerateProc("CheckBox", iDialog, iCheckBox, FPout)
                            ELSEIF INSTR(LCASE$(szTempA$), "bs_autoradiobutton") THEN
                                INCR iRadio
                                GenerateProc("Radio", iDialog, iRadio, FPout)
                            ELSE
                                INCR iButton
                                GenerateProc("Button", iDialog, iButton, FPout)
                            END IF
                            CASE "richedit"
                                INCR iRichEdit
                                GenerateProc("RichEdit", iDialog, iRichEdit, FPout)
                            CASE "richedit20w"
                                INCR iRichEdit
                                GenerateProc("RichEdit", iDialog, iRichEdit, FPout)
                            CASE "richedit20a"
                                INCR iRichEdit
                                GenerateProc("RichEdit", iDialog, iRichEdit, FPout)
                            CASE "richedit20a"
                                INCR iRichEdit
                                GenerateProc("RichEdit", iDialog, iRichEdit, FPout)
                            CASE "sysanimate32"
                                INCR iAnimate
                                GenerateProc("Animate", iDialog, iAnimate, FPout)
                            CASE "sysdatetimepick32"
                                INCR iDate
                                GenerateProc("DatePicker", iDialog, iDate, FPout)
                            CASE "msctls_hotkey32"
                                INCR iHotkey
                                GenerateProc("HotKey", iDialog, iHotkey, FPout)
                            CASE "msctls_progress32"
                                INCR iProgress
                                GenerateProc("ProgressBar", iDialog, iProgress, FPout)
                            CASE "sysmonthcal32"
                                INCR iMonth
                                GenerateProc("MonthCal", iDialog, iMonth, FPout)
                            CASE "rebarwindow32"
                                INCR iRebar
                                GenerateProc("ReBar", iDialog, iRebar, FPout)
                            CASE "msctls_statusbar32"
                                INCR iStatus
                                GenerateProc("StatusBar", iDialog, iStatus, FPout)
                            CASE "toolbarwindow32"
                                INCR iToolbar
                                GenerateProc("ToolBar", iDialog, iToolbar, FPout)
                            CASE "tooltips_class32"
                                INCR iTooltip
                                GenerateProc("ToolTips", iDialog, iTooltip, FPout)
                            CASE "msctls_trackbar32"
                                INCR iTrack
                                GenerateProc("TrackBar", iDialog, iTrack, FPout)
                            CASE "msctls_updown32"
                                INCR iUpDown
                                GenerateProc("UpDown", iDialog, iUpDown, FPout)
                            CASE "comboboxex32"
                                INCR iComboEx
                                GenerateProc("ComboBoxEx", iDialog, iComboEx, FPout)
                            CASE "sysheader32"
                                INCR iHeader
                                GenerateProc("Header", iDialog, iHeader, FPout)
                            CASE "sysipaddress32"
                                INCR iAddress
                                GenerateProc("IPAddress", iDialog, iAddress, FPout)
                            CASE "syslistview32"
                                INCR iListView
                                GenerateProc("ListView", iDialog, iListView, FPout)
                            CASE "syspager"
                                INCR iPager
                                GenerateProc("Pager", iDialog, iPager, FPout)
                            CASE "systabcontrol32"
                                INCR iTab
                                GenerateProc("TabControl", iDialog, iTab, FPout)
                            CASE "systreeview32"
                                INCR iTree
                                GenerateProc("TreeView", iDialog, iTree, FPout)
                        ELSE
                            INCR iControl
                            GenerateProc("Control", iDialog, iControl, FPout)
                        END SELECT
                    END IF
                    szTempA$ = ""
                END IF
            END IF
        WEND
        CLOSE FPin
    END IF

' *************************************************************************

    FPRINT FPout, ""
    FPRINT FPout, "' ";
    szBuffer$ = REPEAT$(74, "#")
    FPRINT FPout, szBuffer$
    FPRINT FPout, ""

    'close output file
    CLOSE FPout
END SUB

' #########################################################################

FUNCTION AddStyle$(szArgument$, szStyle$)
'                  szArgument$  ' style to add
'                  szStyle$     ' string to add style to

    LOCAL szTemp$
    LOCAL szTempA$

    IF INSTR(LCASE$(szStyle$), LCASE$(szArgument$)) = 0 THEN
        IF LEN(TRIM$(szStyle$)) > 0 THEN
            szTemp$ = szStyle$
            szTempA$ = szArgument$ & "|"
            FUNCTION = szTempA$ & szTemp$
        ELSE
            FUNCTION = szArgument$
        END IF
    ELSE
        FUNCTION = szStyle$
    END IF
END FUNCTION

' #########################################################################
'
'   this parsing function is the last known issue that hasn't been fixed!
'
'   problem:    if your string contains more than 2 commas or an advanced
'               mixture of both quotes (") and commas (,), then the  line
'               will be parsed incorrectly and your variables may be  set
'               to a string instead of a number.
'
'   workaround: there are two possibilites for a work around.  either you
'               can recode a better parse function or you can modify  the 
'               bcx source code after it has been generated  (suggested).
'
' #########################################################################

FUNCTION parse$(szLine$,szDel$,iMatch)
'               szLine$ ' string to parse
'               szDel$  ' delimiter string
'               iMatch  ' column to obtain (starting from 0)

    LOCAL szTemp$
    LOCAL szTempA$
    LOCAL szTempB$
    LOCAL iPos
    LOCAL iCur
    LOCAL xPos

    iPos = 1
    iCur = 0
    szTemp$ = szLine$

    DO WHILE iPos > 0
        ' search for delimiter
        iPos = INSTR(szTemp$, szDel$)

        ' our delimiter was found
        IF iPos > 0 THEN
            ' see what phrase we captured
            szTempA$ = MID$(szTemp$, LEN(szDel$), iPos - 1)
            szTempB$ = MID$(szTemp$, iPos + LEN(szDel$), LEN(szTemp$))

            ' first quote found, but not second, move on
            ' ~
            ' this handles the double quotes but it also has one problem
            ' if the user has a string "hi, the " will be interpereted as
            ' the start of a full quote. so if a complement is not found
            ' the string is not found
            IF MOD(countOccur(szTempA$, Chr$(34)),2) <> 0 THEN
                ' search for next delimiter
                xPos = INSTR(szTempB$, szDel$)
                IF xPos > 0 THEN
                    ' combine our string
                    szTempA$ = MID$(szTemp$, LEN(szDel$), (xPos + iPos) - 1)

                    ' check again if the quotes are complete
                    IF MOD(countOccur(szTempA$, Chr$(34)),2) = 0 THEN
                        ' quote is complete
                        IF iMatch = iCur THEN
                            FUNCTION = szTempA$
                        ELSE
                            szTemp$ = Mid$(szTemp$, (xPos + iPos) + Len(szDel$), Len(szTemp$))
                            iCur = iCur + 1
                        END IF
                    ELSE
                        ' must not be a quoted string?
                        szTemp$ = Mid$(szTemp$, iPos + Len(szDel$), Len(szTemp$))
                        iCur = iCur + 1
                    End If
                Else
                    ' no more delimiters?
                    If iCur = iMatch Then
                        FUNCTION = szTempA$
                    Else
                        ' no match
                        szTemp$ = Mid$(szTemp$, iPos + Len(szDel$), Len(szTemp$))
                        iCur = iCur + 1
                    End If
                End If
            ElseIf iCur = iMatch Then
                ' return parsed word
                FUNCTION = Mid$(szTemp$, Len(szDel$), iPos - 1)
            Else
                ' add to our counter
                szTemp$ = Mid$(szTemp$, iPos + Len(szDel$), Len(szTemp$))
                iCur = iCur + 1
            End If
        ElseIf iCur = iMatch Then
            ' our last string
            FUNCTION = szTemp$
        End If
    Loop

    ' return null, since none was found
    '  (i'm using null because a user can't press that)
    '  if its empty, that could just mean that the user
    '  didn't have any data. but null means it didn't exist
    FUNCTION = Chr$(0)
END FUNCTION

' #########################################################################

FUNCTION countOccur(szLine$, szChar$)
'                   szLine$ ' string to count
'                   szChar$ ' character to search for

    LOCAL szBuffer$
    LOCAL iPos
    LOCAL iCount

    iPos = 1
    iCount = 0
    szBuffer$ = szLine$
    Do While iPos > 0
        iPos = InStr(szBuffer$, szChar$)
        If iPos Then
            iCount = iCount + 1
        End If
        szBuffer$ = Mid$(szBuffer$, iPos + Len(szChar$), Len(szBuffer$))
    Loop
    FUNCTION = iCount
END FUNCTION

' #########################################################################

SUB GenerateControl(szCStyle$,szControlName$,szControlID$,szControlClass$,szControlTitle$,szControlStyle$,szControlLeft$,szControlTop$,szControlHeight$,szControlWidth$,iFormNo,iControlNo,iMakeProc,fpName AS FILE *)
'                   szCStyle$           ' extended style
'                   szControlName$      ' name of control
'                   szControlID$        ' control id
'                   szControlClass$     ' class of control
'                   szControlTitle$     ' caption of control
'                   szControlStyle$     ' control styles
'                   szControlLeft$      ' control left position
'                   szControlTop$       ' control top position
'                   szControlHeight$    ' control height
'                   szControlWidth$     ' control width
'                   iFormNo             ' current form number
'                   iControlNo          ' current control number
'                   iMakeProc           ' generate subclass code?
'                   fpName AS FILE *    ' pointer to file handle

    LOCAL szCtrlName$   ' control name
    LOCAL szCtrlNo$     ' number of controls
    LOCAL szFormNo$     ' number of forms

    FPRINT fpName, ""
    FPRINT fpName, "' ";
    szCtrlName$ = REPEAT$(74, "*")
    FPRINT fpName, szCtrlName$
    FPRINT fpName, ""

    ' setup control name
    szCtrlNo$ = TRIM$(STR$(iControlNo))
    szFormNo$ = TRIM$(STR$(iFormNo))
    IF iFormNo > 1 THEN
        szCtrlName$ = "Form" & szFormNo$
        szCtrlName$ = szCtrlName$ & "_"
        szCtrlName$ = szCtrlName$ & szControlName$
        szCtrlName$ = szCtrlName$ & szCtrlNo$
    ELSE
        szCtrlName$ = szControlName$ & szCtrlNo$
    END IF

    FPRINT fpName, "GLOBAL  ";
    FPRINT fpName, szCtrlName$;
    FPRINT fpName, " AS HANDLE"
    FPRINT fpName, "CONST   ID_";
    FPRINT fpName, szCtrlName$;
    FPRINT fpName, " = ";
    FPRINT fpName, szControlID$;
    FPRINT fpName, ""

    FPRINT fpName, szCtrlName$;
    FPRINT fpName, " = CreateWindowEx(";
    IF szCStyle$ = "" THEN
        FPRINT fpName, "0";
    ELSE
        FPRINT fpName, szCStyle$;
    END IF
    FPRINT fpName, ",";
    FPRINT fpName, szControlClass$;
    FPRINT fpName, ",";
    FPRINT fpName, szControlTitle$;
    FPRINT fpName, ",";
    FPRINT fpName, szControlStyle$;
    FPRINT fpName, ",";
    FPRINT fpName, szControlLeft$;
    FPRINT fpName, "*BCX_ScaleX,";
    FPRINT fpName, szControlTop$;
    FPRINT fpName, "*BCX_ScaleY,";
    FPRINT fpName, szControlHeight$;
    FPRINT fpName, "*BCX_ScaleX,";
    FPRINT fpName, szControlWidth$;
    FPRINT fpName, "*BCX_ScaleY,Form";
    FPRINT fpName, szFormNo$;
    FPRINT fpName, ",ID_";
    FPRINT fpName, szCtrlName$;
    FPRINT fpName, ",hInst,NULL)"
    FPRINT fpName, ""

    FPRINT fpName, "SendMessage(";
    FPRINT fpName, szCtrlName$;
    FPRINT fpName, ", WM_SETFONT, GetStockObject(DEFAULT_GUI_FONT),MAKELPARAM(FALSE,0))"

    IF iMakeProc = TRUE THEN
        FPRINT fpName, ""
        FPRINT fpName, "GLOBAL lp";
        FPRINT fpName, szCtrlName$;
        FPRINT fpName, "_WndProc AS FARPROC"
        FPRINT fpName, "lp";
        FPRINT fpName, szCtrlName$;
        FPRINT fpName, "_WndProc = SetWindowLong(";
        FPRINT fpName, szCtrlName$;
        FPRINT fpName, ",GWL_WNDPROC,";
        FPRINT fpName, szCtrlName$;
        FPRINT fpName, "_WndProc)"
    END IF
END SUB

' #########################################################################

SUB GenerateProc(szControlName$, iFormNo, iControlNo, fpName AS FILE *)
'                szControlName$     ' name of control
'                iFormNo            ' form number
'                iControlNo         ' control number
'                fpName AS FILE *   ' pointer to output file

    LOCAL szCtrlName$   ' control name
    LOCAL szCtrlNo$     ' number of controls
    LOCAL szFormNo$     ' number of forms

    FPRINT fpName, ""
    FPRINT fpName, "' ";
    szCtrlName$ = REPEAT$(74, "#")
    FPRINT fpName, szCtrlName$
    FPRINT fpName, ""

    ' setup control name
    szCtrlNo$ = TRIM$(STR$(iControlNo))
    szFormNo$ = TRIM$(STR$(iFormNo))
    IF iFormNo > 1 THEN
        szCtrlName$ = "Form" & szFormNo$
        szCtrlName$ = szCtrlName$ & "_"
        szCtrlName$ = szCtrlName$ & szControlName$
        szCtrlName$ = szCtrlName$ & szCtrlNo$
    ELSE
        szCtrlName$ = szControlName$ & szCtrlNo$
    END IF

    FPRINT fpName, "FUNCTION ";
    FPRINT fpName, szCtrlName$;
    FPRINT fpName, "_WndProc (hWnd as HWND, Msg as UINT, wParam as WPARAM, lParam as LPARAM) AS LRESULT CALLBACK"
    FPRINT fpName, "SELECT CASE Msg"
    FPRINT fpName, "  CASE WM_LBUTTONDBLCLK"
    FPRINT fpName, "  MsgBox ";
    FPRINT fpName, CHR$(34);
    FPRINT fpName, szControlName$;
    FPRINT fpName, " ";
    FPRINT fpName, szCtrlNo$;
    FPRINT fpName, " Double Clicked";
    FPRINT fpName, CHR$(34)
    FPRINT fpName, "  EXIT FUNCTION"
    FPRINT fpName, "END SELECT"
    FPRINT fpName, "FUNCTION = CallWindowProc(lp";
    FPRINT fpName, szCtrlName$;
    FPRINT fpName, "_WndProc,hWnd,Msg,wParam,lParam)"
    FPRINT fpName, "END FUNCTION"
END SUB

' #########################################################################

SUB prn(szStr$, iEnter)
'       szStr$  ' string to print
'       iEnter  ' add return string?

    IF pStatus = TRUE THEN
        IF iEnter = TRUE THEN
            PRINT szStr$
        ELSE
            PRINT szStr$;
        END IF
    END IF
END SUB

' #########################################################################
